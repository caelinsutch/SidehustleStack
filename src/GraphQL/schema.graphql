type Query {
    allPlatforms: [PlatformMVC!]!
    Platform(platformId: ID!): PlatformMVC
}

type Mutation {
    createPlatform(platform: PlatformInput): PlatformMVC!
    updatePlatform(platformId: ID!, data: UpdatePlatformInput!): PlatformMVC
}

input PlatformInput {
    name: String!
    companyLogo: String!
    website: String!
    founded: String!
    headquarteredIn: String!
    funding: String
    description: String!
    category: CategoryInput
    requiresDigitalAudience: String!
    applicationRequired: String!
    creativeWork: Boolean!
    remoteWork: Boolean!
    minimumAge: Int!
    equipmentQualSkills: [EquipmentQualSkills!]!
    otherRequirements: String!
    averageHourlyEarnings: Int!
    averageMonthlyEarnings: Int!
    daysToFirstDollar: Int
    monthlyActiveEarners: Int
    platformPricing: String
    geographicalFocus: String
    affiliateLink: String
    founderMessage: String
    email: String!
    tags: [TagInput!]
}

input UpdatePlatformInput {
    name: String
    companyLogo: String
    website: String
    founded: String
    headquarteredIn: String
    funding: String
    description: String
    category: CategoryInput
    requiresDigitalAudience: String
    applicationRequired: String
    creativeWork: Boolean
    remoteWork: Boolean
    minimumAge: Int
    equipmentQualSkills: [EquipmentQualSkills!]
    otherRequirements: String
    averageHourlyEarnings: Int
    averageMonthlyEarnings: Int
    daysToFirstDollar: Int
    monthlyActiveEarners: Int
    platformPricing: String
    geographicalFocus: String
    affiliateLink: String
    founderMessage: String
    email: String
    tags: [TagInput!]
}

input CategoryInput {
    name: CategoryTypes
    color: String
}

input TagInput {
    name: String
    color: String
}

input LinkInput {
    label: String
    url: String
}
type PlatformMVC @entity {
    platformId: ID! @id
    name: String! @column
    companyLogo: String! @column
    website: String! @column
    founded: String! @column
    headquarteredIn: String! @column
    funding: String @column
    description: String! @column
    category: Category @embedded
    requiresDigitalAudience: String! @column
    applicationRequired: String! @column
    creativeWork: Boolean! @column
    remoteWork: Boolean! @column
    minimumAge: Int! @column
    equipmentQualSkills: [EquipmentQualSkills!]! @column
    otherRequirements: String! @column
    averageHourlyEarnings: Int! @column
    averageMonthlyEarnings: Int! @column
    daysToFirstDollar: Int @column
    monthlyActiveEarners: Int @column
    platformPricing: String @column
    geographicalFocus: String @column
    affiliateLink: String @column
    founderMessage: String @column
    email: String! @column
    tags: [Tag!] @embedded
}

enum EquipmentQualSkills {
    COMPUTER
    SMARTPHONE
    CAR
    MICROPHONE
    BANK_ACCOUNT
    BACHELORS_DEGREE
    NATIVE_ENGLISH
    CHILD_CARE_EXPERIENCE
    ANIMAL_CARE_EXPERIENCE
    BACKGROUND_CHECK
    OTHER
}

type Tag @entity(embedded: true) {
    name: String! @column
    color: String @column
}

type Category @entity(embedded: true) {
    name: CategoryTypes @column
    color: String @column
}

enum CategoryTypes {
    ADULT_CONTENT_CREATOR
    AUDIO_CONTENT_CREATOR
    CHEF
    COACH
    COMMUNITY_LEADER
    CONTENT_CREATOR
    ECOMMERCE
    EVENT_ORGANIZER
    DRIVER
    FITNESS_INSTRUCTOR
    GAMER
    HEALTH
    LIVESTREAMER
    PERSONAL_SHOPPER
    PET_CARETAKER
    PODCASTER
    RENTALS
    RESELLER
    RESTAURANT_WORKER
    SALESPERSON
    TASKS_AND_SERVICES
    TEACHER
    TECH
    VIDEO_COURSE_CREATOR
    WRITER
}
type Link @entity(embedded: true) {
    label: String! @column
    url: String! @column
}
